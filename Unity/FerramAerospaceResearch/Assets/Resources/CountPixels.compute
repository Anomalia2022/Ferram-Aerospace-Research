#pragma kernel CountPixelsMain

static const uint TagLength = 10;
static const uint TagMask = (1 << TagLength) - 1;

Texture2D<float4> InputTexture; // input texture
int IdCount;
uint Tag;

RWStructuredBuffer<int> OutputBuffer;

inline uint get_tag(const uint value)
{
    return value & TagMask;
}

inline int get_index(const uint value)
{
    return value >> TagLength;
}

uint pack_uint(float4 c)
{
    const uint mask = 0xFF;
    c *= 255;
    // no builtin char-types...
    uint4 u = c.abgr; // little-endian
    u &= mask;
    u <<= int4(24, 16, 8, 0);
    return u.x | u.y | u.z | u.w;
}

[numthreads(8,8,1)]
void CountPixelsMain(const uint3 id : SV_DispatchThreadID)
{
    const float4 input = InputTexture.Load(id);
    const uint color = pack_uint(input);

    if (get_tag(color) != Tag) return;
    const int index = get_index(color);
    InterlockedAdd(OutputBuffer[index], 1);
}
